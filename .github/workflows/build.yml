name: Build Workflow

on:
  workflow_call:
    inputs:
      configuration:
        required: false
        type: string
        default: "Debug"
        description: "Build configuration (Debug/Release)"
      ref:
        required: false
        type: string
        default: ""
        description: "Git reference (tag, branch, or commit) to build from"
  workflow_dispatch:
    inputs:
      configuration:
        required: false
        type: choice
        default: "Debug"
        description: "Build configuration"
        options:
          - "Debug"
          - "Release"
      ref:
        required: false
        type: string
        default: ""
        description: "Git reference (tag, branch, or commit) to build from (leave empty for current branch)"

permissions:
  contents: read
  checks: write
  actions: read
  pull-requests: read

env:
  DOTNET_VERSION: "9.0.x"
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "true"
  DOTNET_NOLOGO: "true"
  DOTNET_CLI_TELEMETRY_OPTOUT: "true"

jobs:
  # Build job with conditional runner selection based on platform
  build-all-platforms:
    strategy:
      fail-fast: false
      matrix:
        include:
          - runtime: win-x64
            cache-suffix: ""
            run-tests: true
            create-msi: true
            os: windows
          - runtime: linux-x64
            cache-suffix: ""
            run-tests: true
            create-msi: false
            os: linux
          - runtime: osx-arm64
            cache-suffix: ""
            run-tests: true
            create-msi: false
            os: macos
          # Cross-compilation builds (no native tests)
          - runtime: win-arm64
            cache-suffix: "-arm64"
            run-tests: false
            create-msi: true
            os: windows
          - runtime: linux-arm64
            cache-suffix: "-arm64"
            run-tests: false
            create-msi: false
            os: linux

    runs-on: ${{ matrix.os == 'windows' && vars.SELF_HOSTED_RUNNER || matrix.os == 'linux' && 'ubuntu-latest' || matrix.os == 'macos' && 'macos-latest' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.nuget/packages
            ${{ github.workspace }}/.nuget/packages
          key: ${{ runner.os }}${{ matrix.cache-suffix }}-nuget-${{ hashFiles('**/*.csproj', '**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}${{ matrix.cache-suffix }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration ${{ inputs.configuration }} --no-restore

      - name: Test
        if: matrix.run-tests
        run: dotnet test --configuration ${{ inputs.configuration }} --no-build --verbosity normal --logger "trx;LogFileName=${{ matrix.runtime }}-test-results.trx" --results-directory TestResults
        env:
          DOTNET_RUNTIME: ${{ matrix.runtime }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always() && matrix.run-tests
        with:
          name: test-results-${{ matrix.runtime }}
          path: TestResults/*.trx
          retention-days: 7

      - name: Publish
        run: dotnet publish src/RVToolsMerge/RVToolsMerge.csproj --configuration ${{ inputs.configuration }} --runtime ${{ matrix.runtime }} --self-contained true -p:PublishSingleFile=true -p:PublishTrimmed=true --no-restore --output publish

      - name: Make executable on Unix
        if: matrix.os != 'windows'
        run: chmod +x publish/RVToolsMerge

      - name: Create MSI installer (Windows only)
        if: matrix.os == 'windows' && inputs.configuration == 'Release'
        working-directory: installer
        run: |
          $publishDir = Join-Path $env:GITHUB_WORKSPACE "publish"
          $outputDir = Join-Path $env:GITHUB_WORKSPACE "msi-output"

          # Create output directory
          New-Item -ItemType Directory -Force -Path $outputDir

          # Extract version from project file using proper Windows path separators
          $projectFile = Join-Path $env:GITHUB_WORKSPACE "src" "RVToolsMerge" "RVToolsMerge.csproj"
          Write-Host "Looking for project file at: $projectFile"

          if (-not (Test-Path $projectFile)) {
              Write-Error "Project file not found at: $projectFile"
              exit 1
          }

          $projectContent = Get-Content $projectFile -Raw
          if ($projectContent -match '<Version>(.*?)</Version>') {
              $version = $matches[1].Trim()
              Write-Host "Extracted version: $version"
          } else {
              Write-Error "Could not extract version from project file"
              Write-Host "Project file content preview:"
              $projectContent | Select-Object -First 30 | Write-Host
              exit 1
          }

          # Validate version format
          if (-not ($version -match '^\d+\.\d+\.\d+(\.\d+)?$')) {
              Write-Error "Invalid version format: $version. Expected format: X.Y.Z or X.Y.Z.W"
              exit 1
          }

          # Install WiX toolset
          dotnet tool install --global wix
          # Add WiX UI extension
          wix extension add WixToolset.UI.wixext

          # Build MSI using wix command
          $msiName = "RVToolsMerge-$version-${{ matrix.runtime }}.msi"
          $outputPath = Join-Path $outputDir $msiName
          Write-Host "Building MSI: $msiName"
          Write-Host "Output path: $outputPath"
          Write-Host "Publish directory: $publishDir"

          # Use wix build command with UI extension
          $wixCommand = "wix build RVToolsMerge.wxs -ext WixToolset.UI.wixext -define PublishDir=`"$publishDir`" -out `"$outputPath`""

          Write-Host "Executing: $wixCommand"

          Invoke-Expression $wixCommand

          if ($LASTEXITCODE -ne 0) {
              Write-Error "MSI build failed with exit code: $LASTEXITCODE"
              Write-Host "WiX version:"
              wix --version
              Write-Host "Current working directory:"
              Get-Location
              Write-Host "Files in current directory:"
              Get-ChildItem -Name
              exit 1
          }

          # Verify MSI was created
          if (Test-Path $outputPath) {
              Write-Host "MSI created successfully: $outputPath"
              $msiInfo = Get-Item $outputPath
              Write-Host "MSI size: $($msiInfo.Length) bytes"
          } else {
              Write-Error "MSI file not found at expected location: $outputPath"
              Write-Host "Output directory contents:"
              Get-ChildItem -Path $outputDir -Recurse | Write-Host
              exit 1
          }
        shell: pwsh

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: RVToolsMerge-${{ matrix.runtime }}
          path: publish/
          retention-days: 30

      - name: Upload MSI artifact (Windows only)
        if: matrix.os == 'windows' && inputs.configuration == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: RVToolsMerge-${{ matrix.runtime }}-msi
          path: msi-output/*.msi
          retention-days: 30
