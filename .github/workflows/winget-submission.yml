name: Winget Submission Preparation

on:
  workflow_dispatch:
    inputs:
      releaseTag:
        description: "Release tag to prepare submission for (e.g., v1.3.4). Leave empty to use latest release."
        required: false
        type: string
      dryRun:
        description: "Dry run - don't create branch, just prepare submission info"
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  actions: read
  # Note: This workflow requires a personal access token (WINGET_SUBMISSION_TOKEN)
  # with repo scope to push to the winget-pkgs fork.

jobs:
  prepare-winget-submission:
    name: Prepare Winget Submission
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Release Information
        id: get-release
        run: |
          if [ -n "${{ github.event.inputs.releaseTag }}" ]; then
            RELEASE_TAG="${{ github.event.inputs.releaseTag }}"
            echo "Using specified release tag: $RELEASE_TAG"
          else
            # Get the latest release
            RELEASE_TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
            echo "Using latest release tag: $RELEASE_TAG"
          fi

          if [ -z "$RELEASE_TAG" ]; then
            echo "::error::No release found"
            exit 1
          fi

          # Get release details
          RELEASE_INFO=$(gh release view "$RELEASE_TAG" --json name,body,tagName,publishedAt,assets)
          RELEASE_NAME=$(echo "$RELEASE_INFO" | jq -r '.name')
          RELEASE_BODY=$(echo "$RELEASE_INFO" | jq -r '.body')
          PUBLISHED_AT=$(echo "$RELEASE_INFO" | jq -r '.publishedAt')

          # Extract version from tag (remove 'v' prefix if present)
          VERSION=$(echo "$RELEASE_TAG" | sed 's/^v//')

          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          echo "published_at=$PUBLISHED_AT" >> $GITHUB_OUTPUT

          # Save release body to file for later use
          echo "$RELEASE_BODY" > release_notes.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Winget Manifests from Release
        id: download-manifests
        run: |
          RELEASE_TAG="${{ steps.get-release.outputs.release_tag }}"
          VERSION="${{ steps.get-release.outputs.version }}"

          echo "Downloading winget manifests from release $RELEASE_TAG"          # Create directory for manifests
          mkdir -p winget-manifests

          # Download manifest files from release assets
          MANIFEST_FILES=(
            "RvToolsMerge.RvToolsMerge.yaml"
            "RvToolsMerge.RvToolsMerge.installer.yaml"
            "RvToolsMerge.RvToolsMerge.locale.en-US.yaml"
          )

          for manifest in "${MANIFEST_FILES[@]}"; do
            echo "Downloading $manifest..."
            if gh release download "$RELEASE_TAG" --pattern "$manifest" --dir winget-manifests; then
              echo "✅ Downloaded $manifest"
            else
              echo "::warning::Failed to download $manifest from release $RELEASE_TAG, checking if it exists in release assets"
              # List all assets to help debug missing manifests
              echo "Available assets in release $RELEASE_TAG:"
              gh release view "$RELEASE_TAG" --json assets --jq '.assets[].name'
              echo "::error::Required manifest $manifest not found in release assets"
              exit 1
            fi
          done

          # Verify all files were downloaded
          for manifest in "${MANIFEST_FILES[@]}"; do
            if [ ! -f "winget-manifests/$manifest" ]; then
              echo "::error::Manifest file not found: $manifest"
              exit 1
            fi
          done

          echo "manifest_count=$(ls winget-manifests/*.yaml | wc -l)" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate Winget Manifests
        run: |
          echo "Validating winget manifests..."

          # Check that all required manifests exist
          REQUIRED_MANIFESTS=(
            "RvToolsMerge.RvToolsMerge.yaml"
            "RvToolsMerge.RvToolsMerge.installer.yaml"
            "RvToolsMerge.RvToolsMerge.locale.en-US.yaml"
          )

          for manifest in "${REQUIRED_MANIFESTS[@]}"; do
            if [ ! -f "winget-manifests/$manifest" ]; then
              echo "::error::Required manifest missing: $manifest"
              exit 1
            fi

            # Basic YAML syntax validation
            if ! python3 -c "import yaml; yaml.safe_load(open('winget-manifests/$manifest'))" 2>/dev/null; then
              echo "::error::Invalid YAML syntax in $manifest"
              exit 1
            fi

            echo "✅ Validated $manifest"
          done

          echo "All manifests validated successfully"

      - name: Prepare Submission Information
        id: prepare-submission
        run: |
          VERSION="${{ steps.get-release.outputs.version }}"
          RELEASE_TAG="${{ steps.get-release.outputs.release_tag }}"
          PUBLISHED_AT="${{ steps.get-release.outputs.published_at }}"

          # Create submission info file
          cat > submission-info.md << EOF
          # Winget Package Submission for RVToolsMerge v$VERSION

          ## Package Information
          - **Package ID**: RvToolsMerge.RvToolsMerge
          - **Version**: $VERSION
          - **Release Tag**: $RELEASE_TAG
          - **Published**: $PUBLISHED_AT
          - **Repository**: ${{ github.repository }}

          ## Submission Details
          - **Fork Repository**: https://github.com/sbroenne/winget-pkgs
          - **Target Branch**: RvToolsMerge-$VERSION
          - **Upstream Repository**: https://github.com/microsoft/winget-pkgs
          - **Manifest Path**: manifests/r/RvToolsMerge/RvToolsMerge/$VERSION/

          ## Manifest Files
          - RvToolsMerge.RvToolsMerge.yaml (Version manifest)
          - RvToolsMerge.RvToolsMerge.installer.yaml (Installer manifest)
          - RvToolsMerge.RvToolsMerge.locale.en-US.yaml (Locale manifest)

          ## Release Notes
          EOF

          # Append release notes
          cat release_notes.md >> submission-info.md

          cat >> submission-info.md << EOF

          ## Next Steps
          1. Review the generated manifests in the winget-manifests/ directory
          2. If this was not a dry run, a new branch should be created in your fork
          3. Submit a pull request from your fork to microsoft/winget-pkgs
          4. Follow the winget community review process

          ## Validation Commands
          To validate the manifests locally, you can use:
          \`\`\`
          winget validate --manifest manifests/r/RvToolsMerge/RvToolsMerge/$VERSION/
          \`\`\`
          EOF

          echo "branch_name=RvToolsMerge-$VERSION" >> $GITHUB_OUTPUT
      - name: Setup Git Configuration
        if: ${{ github.event.inputs.dryRun != 'true' }}
        id: setup-git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Clone and Update Fork
        if: ${{ github.event.inputs.dryRun != 'true' }}
        id: update-fork
        run: |
          VERSION="${{ steps.get-release.outputs.version }}"
          BRANCH_NAME="${{ steps.prepare-submission.outputs.branch_name }}"

          echo "Cloning your winget-pkgs fork..."
          git clone https://${{ secrets.WINGET_SUBMISSION_TOKEN }}@github.com/sbroenne/winget-pkgs.git winget-fork
          cd winget-fork

          # Add upstream remote
          git remote add upstream https://github.com/microsoft/winget-pkgs.git

          # Fetch latest from upstream
          git fetch upstream

          # Create and checkout new branch from upstream/master
          git checkout -b "$BRANCH_NAME" upstream/master

          # Create directory structure for manifests
          MANIFEST_DIR="manifests/r/RvToolsMerge/RvToolsMerge/$VERSION"
          mkdir -p "$MANIFEST_DIR"

          # Copy manifests to the correct location
          cp ../winget-manifests/*.yaml "$MANIFEST_DIR/"

          # Verify files were copied
          echo "Files in manifest directory:"
          ls -la "$MANIFEST_DIR/"

          # Add and commit changes
          git add "$MANIFEST_DIR/"
          git commit -m "Add RvToolsMerge version $VERSION

          This submission adds RvToolsMerge version $VERSION to the Windows Package Manager repository.

          Package ID: RvToolsMerge.RvToolsMerge
          Version: $VERSION

          Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.get-release.outputs.release_tag }}"

          echo "manifest_dir=$MANIFEST_DIR" >> $GITHUB_OUTPUT

      - name: Push to Fork
        if: ${{ github.event.inputs.dryRun != 'true' }}
        run: |
          cd winget-fork
          BRANCH_NAME="${{ steps.prepare-submission.outputs.branch_name }}"

          # Push the new branch to your fork
          git push origin "$BRANCH_NAME"

          echo "✅ Branch $BRANCH_NAME pushed to https://github.com/sbroenne/winget-pkgs"
        env:
          GITHUB_TOKEN: ${{ secrets.WINGET_SUBMISSION_TOKEN }}

      - name: Generate Pull Request Information
        if: ${{ github.event.inputs.dryRun != 'true' }}
        id: pr-info
        run: |
          VERSION="${{ steps.get-release.outputs.version }}"
          BRANCH_NAME="${{ steps.prepare-submission.outputs.branch_name }}"
          RELEASE_TAG="${{ steps.get-release.outputs.release_tag }}"

          # Create PR template
          cat > pr-template.md << EOF
          # RvToolsMerge version $VERSION

          This PR adds RvToolsMerge version $VERSION to the Windows Package Manager repository.

          ## Package Information
          - **Package ID**: RvToolsMerge.RvToolsMerge
          - **Version**: $VERSION
          - **Publisher**: RvToolsMerge
          - **Release**: https://github.com/${{ github.repository }}/releases/tag/$RELEASE_TAG

          ## Changes
          - Added RvToolsMerge version $VERSION manifests
          - All manifests follow winget specification v1.6.0
          - Includes version, installer, and locale manifests

          ## Testing
          - [ ] Manifests validated with winget validate command
          - [ ] Installation tested locally
          - [ ] Upgrade tested from previous version

          ## Checklist
          - [x] I have read the Contributing Guide
          - [x] I have verified this is the correct package
          - [x] I have tested the package locally
          - [x] I have verified the package does not already exist

          ---

          *This PR was automatically generated by the RvToolsMerge release automation.*
          EOF

          echo "Fork: sbroenne/winget-pkgs"
          echo "Branch: $BRANCH_NAME"
          echo "Target: microsoft/winget-pkgs (master)"
          echo ""
          echo "To create the pull request, go to:"
          echo "https://github.com/microsoft/winget-pkgs/compare/master...sbroenne:winget-pkgs:$BRANCH_NAME"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: winget-submission-${{ steps.get-release.outputs.version }}
          path: |
            winget-manifests/
            submission-info.md
            pr-template.md
            release_notes.md

      - name: Summary
        run: |
          VERSION="${{ steps.get-release.outputs.version }}"
          RELEASE_TAG="${{ steps.get-release.outputs.release_tag }}"
          BRANCH_NAME="${{ steps.prepare-submission.outputs.branch_name }}"
          DRY_RUN="${{ github.event.inputs.dryRun }}"

          echo "## Winget Submission Preparation Complete! 🎉" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Package Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Release**: $RELEASE_TAG" >> $GITHUB_STEP_SUMMARY
          echo "- **Package ID**: RvToolsMerge.RvToolsMerge" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$DRY_RUN" = "true" ]; then
            echo "### Dry Run Mode" >> $GITHUB_STEP_SUMMARY
            echo "This was a dry run. No branch was created." >> $GITHUB_STEP_SUMMARY
            echo "Manifests have been validated and submission info prepared." >> $GITHUB_STEP_SUMMARY
          else
            echo "### Submission Ready" >> $GITHUB_STEP_SUMMARY
            echo "- **Fork**: https://github.com/sbroenne/winget-pkgs" >> $GITHUB_STEP_SUMMARY
            echo "- **Branch**: $BRANCH_NAME" >> $GITHUB_STEP_SUMMARY
            echo "- **Create PR**: https://github.com/microsoft/winget-pkgs/compare/master...sbroenne:winget-pkgs:$BRANCH_NAME" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Download the submission artifacts for reference" >> $GITHUB_STEP_SUMMARY

          if [ "$DRY_RUN" != "true" ]; then
            echo "2. Create a pull request using the link above" >> $GITHUB_STEP_SUMMARY
            echo "3. Use the pr-template.md content for the PR description" >> $GITHUB_STEP_SUMMARY
            echo "4. Follow the winget community review process" >> $GITHUB_STEP_SUMMARY
          else
            echo "2. Run this workflow again without dry run to create the branch" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Winget manifests" >> $GITHUB_STEP_SUMMARY
          echo "- Submission information" >> $GITHUB_STEP_SUMMARY
          echo "- PR template" >> $GITHUB_STEP_SUMMARY
          echo "- Release notes" >> $GITHUB_STEP_SUMMARY
