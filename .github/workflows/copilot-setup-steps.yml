name: "Copilot Setup Steps"

# Allow testing of the setup steps from your repository's "Actions" tab.
on: workflow_dispatch

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot.
  copilot-setup-steps:
    runs-on: ubuntu-latest

    # Set the permissions to the lowest permissions possible needed for your steps.
    # Copilot will be given its own token for its operations.
    permissions:
      # If you want to clone the repository as part of your setup steps, for example to install dependencies, you'll need the `contents: read` permission. If you don't clone the repository in your setup steps, Copilot will do this for you automatically after the steps complete.
      contents: read

    # Configure firewall allowlist for .NET hosts and additional project requirements
    env:
      COPILOT_AGENT_FIREWALL_ALLOW_LIST_ADDITIONS: |
        api.nuget.org
        www.nuget.org
        nuget.org
        packages.nuget.org
        dist.nuget.org
        dotnetcli.azureedge.net
        dotnetcli.blob.core.windows.net
        download.microsoft.com
        dotnetbuilds.azureedge.net
        pkgs.dev.azure.com
        marketplace.visualstudio.com
        vscode.gallery.vsassets.io
        dev.azure.com
        vsrm.dev.azure.com
        az792536.vo.msecnd.net
        edge.microsoft.com
        cdn.fwupd.org
        crl3.digicert.com
        crl4.digicert.com
        ocsp.digicert.com
        s.symcb.com
        s.symcd.com
        ts-crl.ws.symantec.com
        ts-ocsp.ws.symantec.com
        www.microsoft.com
        aka.ms
        download.visualstudio.microsoft.com

    # You can define any steps you want, and they will run before the agent starts.
    # If you do not check out your code, Copilot will do this for you.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Install .NET tools
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          dotnet tool install -g dotnet-coverage

      - name: Install required packages
        run: |
          dotnet restore

      - name: Create coverage directories
        run: |
          mkdir -p TestResults/Coverage
          mkdir -p TestResults/CoverageReport
          mkdir -p TestResults/CoverageHistory
