name: Cleanup Workflow Runs

on:
  # Run daily at 2 AM UTC to clean up old workflow runs
  schedule:
    - cron: "0 2 * * *"

  # Allow manual triggering of the cleanup
  workflow_dispatch:
    inputs:
      keep_runs:
        description: "Number of runs to keep for each workflow"
        required: false
        default: "3"
        type: string
      retain_days:
        description: "Number of days to retain workflow runs"
        required: false
        default: "30"
        type: string

permissions:
  contents: read
  actions: write

jobs:
  cleanup:
    name: Clean up old workflow runs
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clean up workflow runs
        id: cleanup
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const retainDays = parseInt('${{ github.event.inputs.retain_days || '30' }}');
            const keepMinimumRuns = parseInt('${{ github.event.inputs.keep_runs || '3' }}');
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - retainDays);

            console.log(`Cleaning up workflow runs older than ${retainDays} days (${cutoffDate.toISOString()})`);
            console.log(`Keeping minimum ${keepMinimumRuns} runs per workflow`);
            console.log(`Immediately deleting all failed/cancelled runs`);

            // Get all workflows
            const workflows = await github.rest.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            let totalDeleted = 0;
            let immediateDeleted = 0;
            let ageBasedDeleted = 0;

            for (const workflow of workflows.data.workflows) {
              console.log(`\nProcessing workflow: ${workflow.name} (ID: ${workflow.id})`);

              // Get workflow runs for this workflow
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflow.id,
                per_page: 100,
              });

              console.log(`Found ${runs.data.workflow_runs.length} runs for workflow ${workflow.name}`);

              // Sort runs by creation date (newest first)
              const sortedRuns = runs.data.workflow_runs.sort((a, b) =>
                new Date(b.created_at) - new Date(a.created_at)
              );

              // First pass: Delete all failed/cancelled runs immediately
              const failedOrCancelledRuns = sortedRuns.filter(run =>
                run.conclusion === 'failure' || run.conclusion === 'cancelled'
              );

              for (const run of failedOrCancelledRuns) {
                try {
                  console.log(`Immediately deleting ${run.conclusion} run ${run.id} from ${run.created_at}`);
                  await github.rest.actions.deleteWorkflowRun({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    run_id: run.id,
                  });
                  immediateDeleted++;
                  totalDeleted++;
                } catch (error) {
                  console.log(`Failed to delete run ${run.id}: ${error.message}`);
                }
              }

              // Second pass: Age-based cleanup for remaining runs (excluding failed/cancelled)
              const remainingRuns = sortedRuns.filter(run =>
                run.conclusion !== 'failure' && run.conclusion !== 'cancelled'
              );

              // Keep the minimum number of successful runs and only delete old ones
              const runsToProcess = remainingRuns.slice(keepMinimumRuns);

              for (const run of runsToProcess) {
                const runDate = new Date(run.created_at);
                if (runDate < cutoffDate) {
                  try {
                    console.log(`Deleting old run ${run.id} from ${runDate.toISOString()} (${run.status}/${run.conclusion})`);
                    await github.rest.actions.deleteWorkflowRun({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      run_id: run.id,
                    });
                    ageBasedDeleted++;
                    totalDeleted++;
                  } catch (error) {
                    console.log(`Failed to delete run ${run.id}: ${error.message}`);
                  }
                } else {
                  console.log(`Keeping run ${run.id} from ${runDate.toISOString()} (within retention period)`);
                }
              }
            }
              console.log(`\nCleanup completed. Total runs deleted: ${totalDeleted}`);
              console.log(`- Immediate deletions (failed/cancelled): ${immediateDeleted}`);
              console.log(`- Age-based deletions: ${ageBasedDeleted}`);
            core.setOutput('deleted_count', totalDeleted);
            core.setOutput('immediate_deleted', immediateDeleted);
            core.setOutput('age_deleted', ageBasedDeleted);

      - name: Summary
        run: |
          echo "### Workflow Cleanup Summary :broom:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Runs kept per workflow:** ${{ github.event.inputs.keep_runs || '3' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Maximum retention:** ${{ github.event.inputs.retain_days || '30' }} days" >> $GITHUB_STEP_SUMMARY
          echo "- **Total runs deleted:** ${{ steps.cleanup.outputs.deleted_count || '0' }}" >> $GITHUB_STEP_SUMMARY
          echo "  - **Failed/cancelled (immediate):** ${{ steps.cleanup.outputs.immediate_deleted || '0' }}" >> $GITHUB_STEP_SUMMARY
          echo "  - **Age-based cleanup:** ${{ steps.cleanup.outputs.age_deleted || '0' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cleanup completed:** $(date)" >> $GITHUB_STEP_SUMMARY
