name: Version Management

on:
  workflow_dispatch:
    inputs:
      versionType:
        description: 'Type of version increment'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
      prerelease:
        description: 'Pre-release suffix (leave empty for stable release)'
        required: false
        type: string

jobs:
  bump-version:
    name: Bump Version
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for uncommitted changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "::error::There are uncommitted changes. Please commit or stash them before running this workflow."
            exit 1
          fi

      - name: Check if branch is protected
        id: check-branch-protection
        run: |
          BRANCH_NAME="${{ github.ref_name }}"

          # Use GitHub API to check branch protection
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/branches/$BRANCH_NAME/protection")

          if [[ "$STATUS_CODE" == "200" ]]; then
            echo "Current branch '$BRANCH_NAME' is protected. Will create PR instead of direct commit."
          else
            # Always treat branches as protected
            echo "Creating PR for version change regardless of branch protection status."
          fi
          echo "is_protected=true" >> $GITHUB_OUTPUT

      - name: Get Current Version
        id: get-version
        run: |
          CURRENT_VERSION=$(grep -o '<Version>[^<]*' RVToolsMerge.csproj | sed 's/<Version>//')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Handle complex versions with pre-release tags
          BASE_VERSION=$(echo "$CURRENT_VERSION" | cut -d'-' -f1)

          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT
          echo "patch=$PATCH" >> $GITHUB_OUTPUT

      - name: Calculate New Version
        id: calc-version
        run: |
          MAJOR=${{ steps.get-version.outputs.major }}
          MINOR=${{ steps.get-version.outputs.minor }}
          PATCH=${{ steps.get-version.outputs.patch }}

          if [[ "${{ github.event.inputs.versionType }}" == "major" ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "${{ github.event.inputs.versionType }}" == "minor" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"

          # Add pre-release suffix if provided
          if [[ -n "${{ github.event.inputs.prerelease }}" ]]; then
            NEW_VERSION="${NEW_VERSION}-${{ github.event.inputs.prerelease }}"
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Validate version format
          if ! [[ "$NEW_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?$ ]]; then
            echo "::error::Invalid version format: $NEW_VERSION. Must be in format X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi

      - name: Update Version in csproj
        run: |
          NEW_VERSION="${{ steps.calc-version.outputs.new_version }}"
          sed -i "s/<Version>.*<\/Version>/<Version>$NEW_VERSION<\/Version>/g" RVToolsMerge.csproj
          sed -i "s/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>$NEW_VERSION<\/AssemblyVersion>/g" RVToolsMerge.csproj
          sed -i "s/<FileVersion>.*<\/FileVersion>/<FileVersion>$NEW_VERSION<\/FileVersion>/g" RVToolsMerge.csproj

          echo "::notice::Version updated from ${{ steps.get-version.outputs.current_version }} to $NEW_VERSION"

      - name: Create Version Update Branch
        id: create-branch
        run: |
          # Create a new branch for the version update
          VERSION_BRANCH="version-update-${{ steps.calc-version.outputs.new_version }}"
          git checkout -b $VERSION_BRANCH
          echo "branch_name=$VERSION_BRANCH" >> $GITHUB_OUTPUT
          git add RVToolsMerge.csproj
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git commit -m "chore: bump version to ${{ steps.calc-version.outputs.new_version }} [skip ci]"
          git push origin $VERSION_BRANCH

      - name: Create Pull Request
        id: create-pr
        run: |
          # Create a PR for the version update
          PR_URL=$(gh pr create \
            --title "chore: bump version to ${{ steps.calc-version.outputs.new_version }}" \
            --body "This PR updates the version from ${{ steps.get-version.outputs.current_version }} to ${{ steps.calc-version.outputs.new_version }}." \
            --base "${{ github.ref_name }}" \
            --head "${{ steps.create-branch.outputs.branch_name }}")
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          echo "::notice::Created PR for version update: $PR_URL"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
